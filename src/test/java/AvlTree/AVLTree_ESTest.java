/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 17 03:41:32 GMT 2022
 */

package AvlTree;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import AvlTree.AVLTree;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AVLTree_ESTest extends AVLTree_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(1940);
      int int0 = 1;
      aVLTree0.insert(1);
      aVLTree0.insert((-1));
      aVLTree0.insert(1856);
      aVLTree0.delete(0);
      aVLTree0.delete(1);
      aVLTree0.insert((-953));
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node(826);
      aVLTree0.insert(826);
      aVLTree0.delete(1940);
      aVLTree0.find(0);
      aVLTree0.height();
      aVLTree0.height();
      aVLTree0.height();
      aVLTree0.delete(1);
      aVLTree0.insert(733);
      AVLTree.Node aVLTree_Node1 = aVLTree_Node0.left;
      aVLTree0.delete(2);
      aVLTree0.delete(733);
      int int1 = 0;
      // Undeclared exception!
      try { 
        aVLTree0.insert((-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AvlTree.AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      int int0 = 0;
      aVLTree0.delete(0);
      int int1 = 10;
      aVLTree0.insert(10);
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(10);
      aVLTree0.insert(1);
      aVLTree0.insert((-953));
      int int2 = 0;
      aVLTree_Node0.key = 0;
      int int3 = 3751;
      aVLTree_Node0.key = 1;
      int int4 = 2052;
      aVLTree_Node0.height = 2052;
      // Undeclared exception!
      try { 
        aVLTree0.insert((-116));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("AvlTree.AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(26);
      aVLTree0.insert(3278);
      aVLTree0.insert(354);
      aVLTree0.delete(3278);
      aVLTree0.delete(3278);
      int int0 = (-2410);
      aVLTree0.insert((-2410));
      AVLTree.Node aVLTree_Node0 = aVLTree0.find((-2410));
      aVLTree0.getRoot();
      aVLTree0.height();
      aVLTree_Node0.height = (-2435);
      aVLTree0.insert((-979));
      aVLTree_Node0.height = (-979);
      // Undeclared exception!
      try { 
        aVLTree0.delete(2930);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("AvlTree.AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(2441);
      aVLTree0.insert(2441);
      aVLTree0.delete((-225));
      aVLTree0.delete((-225));
      aVLTree0.height();
      aVLTree0.delete(0);
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      aVLTree0.delete(0);
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      aVLTree_Node0.right = aVLTree_Node1;
      aVLTree0.delete(2441);
      aVLTree0.getBalance(aVLTree_Node0);
      // Undeclared exception!
      aVLTree0.find(532);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-1));
      aVLTree0.insert(3278);
      aVLTree0.insert(354);
      aVLTree0.delete(3278);
      aVLTree0.delete(3278);
      aVLTree0.insert((-2410));
      AVLTree.Node aVLTree_Node0 = aVLTree0.find((-2410));
      aVLTree0.getRoot();
      aVLTree0.height();
      aVLTree_Node0.height = (-2435);
      aVLTree0.insert((-979));
      aVLTree_Node0.height = 0;
      aVLTree0.delete(2930);
      aVLTree0.insert(1);
      aVLTree0.delete(1);
      aVLTree0.delete((-2410));
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.delete(0);
      aVLTree0.getRoot();
      aVLTree0.insert((-2410));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(0);
      aVLTree0.delete(1533);
      aVLTree0.delete(1533);
      aVLTree0.delete(0);
      aVLTree0.delete((-1885));
      aVLTree0.insert(3355);
      aVLTree0.delete((-3477));
      aVLTree0.delete(0);
      aVLTree0.delete((-4745));
      aVLTree0.find(1782);
      aVLTree0.height();
      aVLTree0.delete(1782);
      aVLTree0.height();
      aVLTree0.getBalance((AVLTree.Node) null);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      int int0 = aVLTree0.height();
      assertEquals((-1), int0);
      
      aVLTree0.insert((-3019));
      aVLTree0.insert((-8));
      aVLTree0.insert((-549));
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      assertNull(aVLTree_Node0);
      
      aVLTree0.getRoot();
      aVLTree0.insert(3664);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(1);
      aVLTree0.insert((-1));
      aVLTree0.insert(1856);
      aVLTree0.delete(0);
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node(826);
      aVLTree0.insert(826);
      aVLTree0.find(0);
      aVLTree0.height();
      aVLTree0.height();
      aVLTree0.height();
      aVLTree0.delete(1);
      aVLTree0.insert(733);
      aVLTree0.find(0);
      aVLTree0.delete(2);
      aVLTree0.delete(733);
      aVLTree0.insert(0);
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      aVLTree0.getRoot();
      aVLTree0.insert(1);
      aVLTree0.getBalance(aVLTree_Node1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      int int0 = (-823);
      aVLTree0.insert(3755);
      aVLTree0.delete((-823));
      aVLTree0.delete((-823));
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      AVLTree aVLTree1 = new AVLTree();
      aVLTree1.find(3755);
      aVLTree_Node0.left = null;
      aVLTree0.insert(1613);
      aVLTree_Node0.left = null;
      aVLTree1.delete(1613);
      aVLTree0.insert((-1));
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.find(0);
      aVLTree0.insert(0);
      aVLTree0.delete(0);
      // Undeclared exception!
      try { 
        aVLTree0.insert((-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AvlTree.AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(0);
      aVLTree0.delete(1196);
      aVLTree0.insert(2946);
      aVLTree0.delete(1196);
      int int0 = (-1);
      aVLTree0.insert((-1));
      // Undeclared exception!
      try { 
        aVLTree0.delete(2946);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("AvlTree.AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(1877);
      aVLTree0.delete(1877);
      aVLTree0.insert(1877);
      aVLTree0.insert((-1887));
      aVLTree0.delete(2565);
      aVLTree0.find(1877);
      aVLTree0.insert(0);
      aVLTree0.find((-922));
      aVLTree0.insert(1);
      aVLTree0.find((-1861));
      // Undeclared exception!
      try { 
        aVLTree0.insert(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AvlTree.AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(2105);
      aVLTree0.delete(924);
      aVLTree0.insert(1);
      aVLTree0.delete(2107);
      aVLTree0.delete((-810));
      aVLTree0.delete((-810));
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      aVLTree_Node1.key = 1;
      aVLTree_Node0.left = aVLTree_Node1;
      aVLTree_Node0.height = 1189;
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.getRoot();
      aVLTree0.height();
      int int0 = 0;
      aVLTree0.insert(int0);
      aVLTree0.getBalance(aVLTree_Node0.left);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(0);
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node(1374);
      aVLTree0.delete(1374);
      AVLTree.Node aVLTree_Node1 = aVLTree_Node0.right;
      aVLTree_Node0.left = null;
      AVLTree.Node aVLTree_Node2 = aVLTree_Node0.left;
      aVLTree0.insert(1374);
      aVLTree0.getBalance((AVLTree.Node) null);
      aVLTree0.insert(489);
      aVLTree0.find(0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(0);
      assertNull(aVLTree_Node0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete((-2496));
      aVLTree0.insert(0);
      aVLTree0.delete(3283);
      aVLTree0.getRoot();
      // Undeclared exception!
      try { 
        aVLTree0.insert(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AvlTree.AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(0);
      aVLTree0.insert(305);
      aVLTree0.insert(1);
      aVLTree0.insert(0);
      aVLTree0.delete(0);
      aVLTree0.delete(0);
      aVLTree0.height();
      aVLTree0.find(1);
      aVLTree0.height();
      aVLTree0.getRoot();
      aVLTree0.getRoot();
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(1);
      aVLTree0.insert(802);
      aVLTree0.insert(1413);
      aVLTree0.insert(2852);
      aVLTree0.insert((-2287));
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      aVLTree0.delete((-2565));
      aVLTree0.delete(1);
      aVLTree0.find(1);
      aVLTree0.getBalance(aVLTree_Node0);
      // Undeclared exception!
      try { 
        aVLTree0.insert((-2287));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AvlTree.AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(457);
      aVLTree0.insert(0);
      aVLTree0.insert(7105);
      aVLTree0.delete(7105);
      aVLTree0.find((-139));
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      int int0 = aVLTree0.getBalance((AVLTree.Node) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      int int0 = (-1353);
      aVLTree0.find((-1353));
      aVLTree0.insert(1492);
      int int1 = 385;
      aVLTree0.insert(385);
      aVLTree0.delete(670);
      aVLTree0.insert(2151);
      aVLTree0.insert((-1));
      // Undeclared exception!
      try { 
        aVLTree0.insert((-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AvlTree.AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(0);
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node(1374);
      aVLTree0.delete(1374);
      AVLTree.Node aVLTree_Node1 = aVLTree_Node0.right;
      aVLTree_Node0.left = null;
      AVLTree.Node aVLTree_Node2 = aVLTree_Node0.left;
      aVLTree0.insert(1374);
      aVLTree0.insert(489);
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-1));
      aVLTree0.delete(2713);
      aVLTree0.delete((-925));
      aVLTree0.insert(2713);
      aVLTree0.getRoot();
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-253));
      aVLTree0.insert(1);
      aVLTree0.height();
      aVLTree0.find(1);
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(4351);
      // Undeclared exception!
      try { 
        aVLTree0.insert(4351);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AvlTree.AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(0);
      aVLTree0.insert((-253));
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(0);
      aVLTree0.delete(0);
      aVLTree0.insert(0);
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(0);
      int int0 = aVLTree0.getBalance(aVLTree_Node0);
      assertEquals(0, aVLTree0.height());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-2252));
      aVLTree0.height();
      aVLTree0.delete(0);
      aVLTree0.getRoot();
      aVLTree0.find(0);
      assertEquals(0, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete((-2227));
      assertEquals((-1), aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(1940);
      int int0 = 1;
      aVLTree0.insert(1);
      int int1 = (-1);
      aVLTree0.insert((-1487));
      aVLTree0.insert((-1));
      aVLTree0.insert(1856);
      aVLTree0.delete(1);
      aVLTree0.insert(826);
      aVLTree0.delete(1940);
      aVLTree0.find(0);
      aVLTree0.delete(1);
      // Undeclared exception!
      try { 
        aVLTree0.insert((-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AvlTree.AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(10);
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(10);
      assertNotNull(aVLTree_Node0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(0);
      aVLTree0.height();
      aVLTree0.getRoot();
      aVLTree0.find((-590));
      int int0 = aVLTree0.getBalance((AVLTree.Node) null);
      assertEquals(0, aVLTree0.height());
      assertEquals(0, int0);
  }
}
